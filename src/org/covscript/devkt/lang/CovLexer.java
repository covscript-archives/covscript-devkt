/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.covscript.devkt.lang;

import org.covscript.devkt.lang.psi.CovTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>cov-lexer.flex</tt>
 */
class CovLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COLLAPSING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\10\2\1\3\4\2\1\4\1\5\1\6\4\2\1\7\6\2\1\10\1\11\361\2");

  /* The ZZ_CMAP_Y table has 640 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\27\2\1\3\1\2\1\4\3\2\1\5\5\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\7\1\2\1\7\1\3\4\2\1\5\1\7\34"+
    "\2\1\3\1\7\4\2\1\10\1\2\1\7\2\2\1\11\2\2\1\7\1\4\2\2\1\11\146\2\1\3\12\2\1"+
    "\7\1\5\2\2\1\12\1\2\1\7\5\2\1\4\114\2\1\7\25\2\1\3\56\2\1\6\1\2\1\4\1\13\2"+
    "\2\1\7\3\2\1\4\5\2\1\7\1\2\1\7\5\2\1\7\1\2\1\5\1\4\6\2\1\3\15\2\1\7\67\2\1"+
    "\3\3\2\1\7\61\2\1\14\105\2\1\7\32\2");

  /* The ZZ_CMAP_A table has 832 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\20\1\1\2\0\1\20\22\0\1\20\1\57\1\3\1\2\1\0\1\52\1\54\1\5\1\61\1\62"+
    "\1\50\1\47\1\60\1\42\1\10\1\46\12\7\1\44\1\0\1\56\1\45\1\43\1\53\1\11\32\6"+
    "\1\65\1\4\1\66\1\51\1\6\1\0\1\21\1\12\1\25\1\17\1\13\1\26\1\14\1\33\1\15\1"+
    "\6\1\36\1\27\1\22\1\16\1\34\1\24\1\6\1\35\1\23\1\31\1\37\1\40\1\30\1\41\1"+
    "\32\1\6\1\63\1\55\1\64\142\0\12\7\106\0\12\7\6\0\12\7\134\0\12\7\40\0\12\7"+
    "\54\0\12\7\60\0\12\7\6\0\12\7\66\0\12\7\26\0\12\7\74\0\12\7\16\0\62\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\6\4\1\7\14\4\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\1\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\7\2\1\1\33\2\0\1\34\3\0\7\4\1\35"+
    "\23\4\1\36\1\4\1\37\5\4\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\3\0\1\5\2\0\2\4"+
    "\1\57\5\4\1\60\1\4\1\61\2\4\1\62\10\4"+
    "\1\63\5\4\1\64\5\4\1\65\3\0\2\4\1\66"+
    "\5\4\1\67\2\4\1\70\2\4\1\71\5\4\1\72"+
    "\3\4\1\73\4\4\1\0\1\74\1\0\1\75\1\76"+
    "\1\4\1\77\7\4\1\100\1\101\1\4\1\102\1\4"+
    "\1\103\1\4\1\104\2\4\1\105\1\106\1\0\1\107"+
    "\1\4\1\110\3\4\1\111\1\112\3\4\1\113\1\4"+
    "\1\114\1\115\1\116\1\4\1\117\1\120\4\4\1\121"+
    "\1\122\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\156\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\156\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\156\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\156"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\u0898\0\u08cf\0\156\0\u0906"+
    "\0\u093d\0\156\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u014a\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\u014a\0\u0faf\0\u014a\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\u10f9"+
    "\0\u1130\0\u1167\0\u0974\0\u119e\0\u11d5\0\u120c\0\u1243\0\u014a"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u014a\0\u138d\0\u014a"+
    "\0\u13c4\0\u13fb\0\u014a\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u014a\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u014a\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u014a"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u014a\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u014a\0\u1a36\0\u1a6d\0\u014a\0\u1aa4"+
    "\0\u1adb\0\u014a\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u014a"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u014a\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\156\0\u1ddd\0\u014a\0\u014a\0\u1e14\0\u014a\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u014a\0\u014a"+
    "\0\u1fcc\0\u014a\0\u2003\0\u014a\0\u203a\0\u014a\0\u2071\0\u20a8"+
    "\0\u014a\0\u014a\0\u20df\0\156\0\u2116\0\u014a\0\u214d\0\u2184"+
    "\0\u21bb\0\u014a\0\u014a\0\u21f2\0\u2229\0\u2260\0\u014a\0\u2297"+
    "\0\u014a\0\u014a\0\u014a\0\u22ce\0\u014a\0\u014a\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\u014a\0\u014a\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\10\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\10\1\33\1\34\1\10\1\35\1\36"+
    "\1\10\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\3\1\64"+
    "\1\5\1\65\1\3\1\7\1\10\1\11\1\12\1\66"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\10\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\10\1\33\1\34\1\10\1\35\1\36\1\10\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\67\0\1\5\1\0\65\5"+
    "\1\6\1\0\1\6\1\67\1\70\62\6\1\7\1\0"+
    "\2\7\1\71\1\72\61\7\6\0\2\10\2\0\6\10"+
    "\1\0\21\10\34\0\1\11\1\73\70\0\1\74\1\75"+
    "\61\0\2\10\2\0\6\10\1\0\6\10\1\76\5\10"+
    "\1\77\4\10\33\0\2\10\2\0\4\10\1\100\1\10"+
    "\1\0\6\10\1\101\11\10\1\102\33\0\2\10\2\0"+
    "\6\10\1\0\4\10\1\103\14\10\33\0\2\10\2\0"+
    "\6\10\1\0\1\10\1\104\3\10\1\105\2\10\1\106"+
    "\10\10\33\0\2\10\2\0\1\10\1\107\4\10\1\0"+
    "\1\110\12\10\1\111\2\10\1\112\2\10\33\0\2\10"+
    "\2\0\1\10\1\113\4\10\1\0\21\10\45\0\1\22"+
    "\54\0\2\10\2\0\4\10\1\114\1\10\1\0\21\10"+
    "\33\0\2\10\2\0\6\10\1\0\7\10\1\115\1\116"+
    "\10\10\33\0\2\10\2\0\6\10\1\0\1\117\20\10"+
    "\33\0\2\10\2\0\6\10\1\0\1\120\12\10\1\121"+
    "\5\10\33\0\2\10\2\0\6\10\1\0\1\122\12\10"+
    "\1\123\2\10\1\124\2\10\33\0\2\10\2\0\6\10"+
    "\1\0\13\10\1\125\5\10\33\0\2\10\2\0\6\10"+
    "\1\0\12\10\1\126\6\10\33\0\2\10\2\0\6\10"+
    "\1\0\11\10\1\127\1\130\1\131\1\132\4\10\33\0"+
    "\2\10\2\0\6\10\1\0\14\10\1\133\2\10\1\134"+
    "\1\10\33\0\2\10\2\0\1\10\1\135\4\10\1\0"+
    "\21\10\33\0\2\10\2\0\4\10\1\136\1\10\1\0"+
    "\2\10\1\137\16\10\33\0\2\10\2\0\6\10\1\0"+
    "\1\140\20\10\67\0\1\141\1\142\1\0\1\143\66\0"+
    "\1\144\66\0\1\145\66\0\1\146\66\0\1\147\1\0"+
    "\1\150\64\0\1\151\66\0\1\152\66\0\1\153\75\0"+
    "\1\154\67\0\1\155\56\0\1\156\66\0\1\157\21\0"+
    "\3\65\1\67\1\160\62\65\12\0\1\161\1\162\53\0"+
    "\67\6\67\7\7\0\1\163\72\0\1\164\71\0\1\165"+
    "\56\0\2\10\2\0\6\10\1\0\13\10\1\166\5\10"+
    "\33\0\2\10\2\0\1\10\1\167\4\10\1\0\21\10"+
    "\33\0\2\10\2\0\5\10\1\170\1\0\21\10\33\0"+
    "\2\10\2\0\6\10\1\0\2\10\1\171\16\10\33\0"+
    "\2\10\2\0\6\10\1\0\10\10\1\172\10\10\33\0"+
    "\2\10\2\0\4\10\1\173\1\10\1\0\21\10\33\0"+
    "\2\10\2\0\6\10\1\0\3\10\1\174\15\10\33\0"+
    "\2\10\2\0\1\10\1\175\4\10\1\0\21\10\33\0"+
    "\2\10\2\0\6\10\1\0\7\10\1\176\11\10\33\0"+
    "\2\10\2\0\6\10\1\0\1\10\1\177\17\10\33\0"+
    "\2\10\2\0\6\10\1\0\10\10\1\200\10\10\33\0"+
    "\2\10\2\0\6\10\1\0\6\10\1\201\12\10\33\0"+
    "\2\10\2\0\6\10\1\0\5\10\1\202\13\10\33\0"+
    "\2\10\2\0\5\10\1\203\1\0\21\10\33\0\2\10"+
    "\2\0\3\10\1\204\2\10\1\0\21\10\33\0\2\10"+
    "\2\0\1\10\1\205\4\10\1\0\14\10\1\206\4\10"+
    "\33\0\2\10\2\0\6\10\1\0\4\10\1\207\14\10"+
    "\33\0\2\10\2\0\6\10\1\0\2\10\1\210\5\10"+
    "\1\211\10\10\33\0\2\10\2\0\4\10\1\212\1\10"+
    "\1\0\21\10\33\0\2\10\2\0\6\10\1\0\6\10"+
    "\1\213\12\10\33\0\2\10\2\0\6\10\1\0\14\10"+
    "\1\214\4\10\33\0\2\10\2\0\4\10\1\215\1\10"+
    "\1\0\21\10\33\0\2\10\2\0\6\10\1\0\13\10"+
    "\1\216\5\10\33\0\2\10\2\0\3\10\1\217\2\10"+
    "\1\0\21\10\33\0\2\10\2\0\6\10\1\0\3\10"+
    "\1\220\15\10\33\0\2\10\2\0\6\10\1\0\14\10"+
    "\1\221\4\10\33\0\2\10\2\0\6\10\1\0\11\10"+
    "\1\222\4\10\1\223\2\10\33\0\2\10\2\0\1\10"+
    "\1\224\4\10\1\0\21\10\33\0\2\10\2\0\6\10"+
    "\1\0\10\10\1\225\10\10\33\0\2\10\2\0\6\10"+
    "\1\0\10\10\1\226\10\10\33\0\2\10\2\0\3\10"+
    "\1\227\2\10\1\0\21\10\33\0\2\10\2\0\6\10"+
    "\1\0\14\10\1\230\4\10\25\0\67\65\13\0\1\231"+
    "\71\0\1\232\64\0\1\233\71\0\1\3\55\0\2\10"+
    "\2\0\6\10\1\0\4\10\1\234\14\10\33\0\2\10"+
    "\2\0\6\10\1\0\1\235\20\10\33\0\2\10\2\0"+
    "\1\10\1\236\4\10\1\0\21\10\33\0\2\10\2\0"+
    "\1\10\1\237\4\10\1\0\21\10\33\0\2\10\2\0"+
    "\1\10\1\240\4\10\1\0\21\10\33\0\2\10\2\0"+
    "\6\10\1\0\13\10\1\241\5\10\33\0\2\10\2\0"+
    "\6\10\1\0\14\10\1\242\4\10\33\0\2\10\2\0"+
    "\1\10\1\243\4\10\1\0\21\10\33\0\2\10\2\0"+
    "\6\10\1\0\6\10\1\244\12\10\33\0\2\10\2\0"+
    "\6\10\1\0\1\245\20\10\33\0\2\10\2\0\6\10"+
    "\1\0\10\10\1\246\10\10\33\0\2\10\2\0\6\10"+
    "\1\0\3\10\1\247\15\10\33\0\2\10\2\0\6\10"+
    "\1\0\16\10\1\250\2\10\33\0\2\10\2\0\6\10"+
    "\1\0\15\10\1\251\3\10\33\0\2\10\2\0\1\10"+
    "\1\252\4\10\1\0\21\10\33\0\2\10\2\0\6\10"+
    "\1\0\4\10\1\253\14\10\33\0\2\10\2\0\6\10"+
    "\1\0\2\10\1\254\5\10\1\255\10\10\33\0\2\10"+
    "\2\0\6\10\1\0\2\10\1\256\16\10\33\0\2\10"+
    "\2\0\6\10\1\0\4\10\1\257\14\10\33\0\2\10"+
    "\2\0\6\10\1\0\3\10\1\260\15\10\33\0\2\10"+
    "\2\0\6\10\1\0\6\10\1\261\12\10\33\0\2\10"+
    "\2\0\1\10\1\262\4\10\1\0\21\10\33\0\2\10"+
    "\2\0\6\10\1\0\13\10\1\263\5\10\33\0\2\10"+
    "\2\0\1\10\1\264\4\10\1\0\21\10\33\0\2\10"+
    "\2\0\6\10\1\0\14\10\1\265\4\10\33\0\2\10"+
    "\2\0\6\10\1\0\16\10\1\266\2\10\33\0\2\10"+
    "\2\0\3\10\1\267\2\10\1\0\21\10\33\0\2\10"+
    "\2\0\4\10\1\270\1\10\1\0\21\10\41\0\1\271"+
    "\71\0\1\272\64\0\1\273\57\0\2\10\2\0\6\10"+
    "\1\0\15\10\1\274\3\10\33\0\2\10\2\0\6\10"+
    "\1\0\15\10\1\275\3\10\33\0\2\10\2\0\4\10"+
    "\1\276\1\10\1\0\21\10\33\0\2\10\2\0\6\10"+
    "\1\0\7\10\1\277\11\10\33\0\2\10\2\0\6\10"+
    "\1\0\14\10\1\300\4\10\33\0\2\10\2\0\6\10"+
    "\1\0\1\301\20\10\33\0\2\10\2\0\6\10\1\0"+
    "\2\10\1\302\16\10\33\0\2\10\2\0\6\10\1\0"+
    "\16\10\1\303\2\10\33\0\2\10\2\0\6\10\1\0"+
    "\4\10\1\304\14\10\33\0\2\10\2\0\6\10\1\0"+
    "\4\10\1\305\14\10\33\0\2\10\2\0\6\10\1\0"+
    "\1\306\20\10\33\0\2\10\2\0\6\10\1\0\12\10"+
    "\1\307\6\10\33\0\2\10\2\0\6\10\1\0\10\10"+
    "\1\310\10\10\33\0\2\10\2\0\3\10\1\311\2\10"+
    "\1\0\21\10\33\0\2\10\2\0\1\10\1\312\4\10"+
    "\1\0\21\10\33\0\2\10\2\0\6\10\1\0\10\10"+
    "\1\313\10\10\33\0\2\10\2\0\1\10\1\314\4\10"+
    "\1\0\21\10\33\0\2\10\2\0\3\10\1\315\2\10"+
    "\1\0\21\10\33\0\2\10\2\0\6\10\1\0\7\10"+
    "\1\316\11\10\33\0\2\10\2\0\6\10\1\0\14\10"+
    "\1\317\4\10\33\0\2\10\2\0\6\10\1\0\14\10"+
    "\1\320\4\10\33\0\2\10\2\0\6\10\1\0\6\10"+
    "\1\321\12\10\33\0\2\10\2\0\2\10\1\322\3\10"+
    "\1\0\21\10\42\0\1\323\67\0\1\324\56\0\2\10"+
    "\2\0\5\10\1\325\1\0\21\10\33\0\2\10\2\0"+
    "\6\10\1\0\10\10\1\326\10\10\33\0\2\10\2\0"+
    "\6\10\1\0\10\10\1\327\10\10\33\0\2\10\2\0"+
    "\6\10\1\0\3\10\1\330\15\10\33\0\2\10\2\0"+
    "\6\10\1\0\6\10\1\331\12\10\33\0\2\10\2\0"+
    "\6\10\1\0\12\10\1\332\6\10\33\0\2\10\2\0"+
    "\6\10\1\0\10\10\1\333\10\10\33\0\2\10\2\0"+
    "\2\10\1\334\3\10\1\0\21\10\33\0\2\10\2\0"+
    "\4\10\1\335\1\10\1\0\21\10\33\0\2\10\2\0"+
    "\3\10\1\336\2\10\1\0\21\10\33\0\2\10\2\0"+
    "\5\10\1\337\1\0\21\10\33\0\2\10\2\0\3\10"+
    "\1\340\2\10\1\0\21\10\33\0\2\10\2\0\4\10"+
    "\1\341\1\10\1\0\21\10\43\0\1\3\56\0\2\10"+
    "\2\0\6\10\1\0\2\10\1\342\16\10\33\0\2\10"+
    "\2\0\1\10\1\343\4\10\1\0\21\10\33\0\2\10"+
    "\2\0\6\10\1\0\1\344\20\10\33\0\2\10\2\0"+
    "\6\10\1\0\10\10\1\345\10\10\33\0\2\10\2\0"+
    "\1\10\1\346\4\10\1\0\21\10\33\0\2\10\2\0"+
    "\6\10\1\0\16\10\1\347\2\10\33\0\2\10\2\0"+
    "\6\10\1\0\13\10\1\350\5\10\33\0\2\10\2\0"+
    "\5\10\1\351\1\0\21\10\33\0\2\10\2\0\6\10"+
    "\1\0\4\10\1\352\14\10\33\0\2\10\2\0\1\10"+
    "\1\353\4\10\1\0\21\10\33\0\2\10\2\0\4\10"+
    "\1\354\1\10\1\0\21\10\33\0\2\10\2\0\1\10"+
    "\1\355\4\10\1\0\21\10\33\0\2\10\2\0\1\10"+
    "\1\356\4\10\1\0\21\10\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9185];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\1\11\26\1\1\11\6\1\1\11"+
    "\4\1\10\11\2\1\1\11\2\0\1\11\3\0\43\1"+
    "\17\11\3\0\1\1\2\0\43\1\3\0\35\1\1\0"+
    "\1\11\1\0\27\1\1\0\1\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public CovLexer() { this((java.io.Reader) null); }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CovLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 85: break;
          case 2: 
            { return CovTypes.EOL;
            } 
            // fall through
          case 86: break;
          case 3: 
            { return CovTypes.LINE_COMMENT;
            } 
            // fall through
          case 87: break;
          case 4: 
            { return CovTypes.SYM;
            } 
            // fall through
          case 88: break;
          case 5: 
            { return CovTypes.NUM;
            } 
            // fall through
          case 89: break;
          case 6: 
            { return CovTypes.DOT;
            } 
            // fall through
          case 90: break;
          case 7: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 91: break;
          case 8: 
            { return CovTypes.MINUS_SYM;
            } 
            // fall through
          case 92: break;
          case 9: 
            { return CovTypes.GT_SYM;
            } 
            // fall through
          case 93: break;
          case 10: 
            { return CovTypes.COLON_SYM;
            } 
            // fall through
          case 94: break;
          case 11: 
            { return CovTypes.EQ;
            } 
            // fall through
          case 95: break;
          case 12: 
            { return CovTypes.DIV_SYM;
            } 
            // fall through
          case 96: break;
          case 13: 
            { return CovTypes.PLUS_SYM;
            } 
            // fall through
          case 97: break;
          case 14: 
            { return CovTypes.TIMES_SYM;
            } 
            // fall through
          case 98: break;
          case 15: 
            { return CovTypes.POW_SYM;
            } 
            // fall through
          case 99: break;
          case 16: 
            { return CovTypes.REM_SYM;
            } 
            // fall through
          case 100: break;
          case 17: 
            { return CovTypes.QUESTION_SYM;
            } 
            // fall through
          case 101: break;
          case 18: 
            { return CovTypes.LT_SYM;
            } 
            // fall through
          case 102: break;
          case 19: 
            { return CovTypes.NOT_SYM;
            } 
            // fall through
          case 103: break;
          case 20: 
            { return CovTypes.COMMA;
            } 
            // fall through
          case 104: break;
          case 21: 
            { return CovTypes.LEFT_BRACKET;
            } 
            // fall through
          case 105: break;
          case 22: 
            { return CovTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 106: break;
          case 23: 
            { return CovTypes.LEFT_B_BRACKET;
            } 
            // fall through
          case 107: break;
          case 24: 
            { return CovTypes.RIGHT_B_BRACKET;
            } 
            // fall through
          case 108: break;
          case 25: 
            { return CovTypes.LEFT_S_BRACKET;
            } 
            // fall through
          case 109: break;
          case 26: 
            { return CovTypes.RIGHT_S_BRACKET;
            } 
            // fall through
          case 110: break;
          case 27: 
            { return CovTypes.STR;
            } 
            // fall through
          case 111: break;
          case 28: 
            { return CovTypes.CHAR;
            } 
            // fall through
          case 112: break;
          case 29: 
            { return CovTypes.IF_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 30: 
            { return CovTypes.TO_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 31: 
            { return CovTypes.OR_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 32: 
            { return CovTypes.DEC_SYM;
            } 
            // fall through
          case 116: break;
          case 33: 
            { return CovTypes.ARROW;
            } 
            // fall through
          case 117: break;
          case 34: 
            { return CovTypes.MINUS_ASS;
            } 
            // fall through
          case 118: break;
          case 35: 
            { return CovTypes.GE_SYM;
            } 
            // fall through
          case 119: break;
          case 36: 
            { return CovTypes.EQ_SYM;
            } 
            // fall through
          case 120: break;
          case 37: 
            { return CovTypes.DIV_ASS;
            } 
            // fall through
          case 121: break;
          case 38: 
            { return CovTypes.PLUS_ASS;
            } 
            // fall through
          case 122: break;
          case 39: 
            { return CovTypes.INC_SYM;
            } 
            // fall through
          case 123: break;
          case 40: 
            { return CovTypes.TIMES_ASS;
            } 
            // fall through
          case 124: break;
          case 41: 
            { return CovTypes.POW_ASS;
            } 
            // fall through
          case 125: break;
          case 42: 
            { return CovTypes.REM_ASS;
            } 
            // fall through
          case 126: break;
          case 43: 
            { return CovTypes.AND_SYM;
            } 
            // fall through
          case 127: break;
          case 44: 
            { return CovTypes.OR_SYM;
            } 
            // fall through
          case 128: break;
          case 45: 
            { return CovTypes.LE_SYM;
            } 
            // fall through
          case 129: break;
          case 46: 
            { return CovTypes.UN_SYM;
            } 
            // fall through
          case 130: break;
          case 47: 
            { return CovTypes.END_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 48: 
            { return CovTypes.NEW_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 49: 
            { return CovTypes.NOT_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 50: 
            { return CovTypes.AND_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 51: 
            { return CovTypes.FOR_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 52: 
            { return CovTypes.TRY_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 53: 
            { return CovTypes.VAR_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 54: 
            { return CovTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 55: 
            { return CovTypes.NULL_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 56: 
            { return CovTypes.STEP_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 57: 
            { return CovTypes.CASE_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 58: 
            { return CovTypes.LOOP_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 59: 
            { return CovTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 60: 
            { yybegin(YYINITIAL); return CovTypes.COLLAPSER_END;
            } 
            // fall through
          case 144: break;
          case 61: 
            { return CovTypes.BLOCK_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 62: 
            { return CovTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 63: 
            { return CovTypes.GCNEW_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 64: 
            { return CovTypes.CATCH_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 65: 
            { return CovTypes.CONST_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 66: 
            { return CovTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 67: 
            { return CovTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 68: 
            { return CovTypes.THROW_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 69: 
            { return CovTypes.UNTIL_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 70: 
            { return CovTypes.USING_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 71: 
            { yybegin(COLLAPSING); return CovTypes.COLLAPSER_BEGIN;
            } 
            // fall through
          case 155: break;
          case 72: 
            { return CovTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 73: 
            { return CovTypes.SWITCH_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 74: 
            { return CovTypes.STRUCT_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 75: 
            { return CovTypes.TYPEID_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 76: 
            { return CovTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 77: 
            { return CovTypes.EXTENDS_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 78: 
            { return CovTypes.ITERATE_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 79: 
            { return CovTypes.DEFAULT_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 80: 
            { return CovTypes.PACKAGE_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 81: 
            { return CovTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 82: 
            { return CovTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 83: 
            { return CovTypes.OVERRIDE_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 84: 
            { return CovTypes.NAMESPACE_KEYWORD;
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
